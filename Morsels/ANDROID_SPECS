Game Specification: Morsels (Android Version)

1. High-Level Overview

Morsels is an educational game designed to teach players International Morse Code in an engaging way. The core gameplay loop consists of listening to a sequence of letters played as Morse code, and then tapping falling objects (pigs) corresponding to those letters in the correct order. The game features a progressive learning system that introduces new letters as the player demonstrates mastery. It is built using a combination of Jetpack Compose for the application's user interface and menus, and a 2D game framework like LibGDX for the main game scene.

2. Core Technologies (Android Stack)

  - **Language:** Kotlin.
  - **UI Framework:** Jetpack Compose for all non-game screens (menus, instructions, etc.), navigation, and overall application structure.
  - **Game Engine:** LibGDX, a cross-platform game development framework. This will be used to render the 2D game scene, manage the game loop, and handle animations.
    - **Physics Engine:** Box2D, integrated within LibGDX, for 2D physics simulations (gravity, collisions).
  - **Audio Engine:** Android's native `AudioTrack` class for low-level, on-the-fly generation and playback of raw PCM sine-wave data for the Morse code tones.
  - **Asset Generation:** Android's `Bitmap` and `Canvas` API (`android.graphics`) for the procedural generation of all visual assets. These Bitmaps will be converted into LibGDX `Texture` objects at runtime.

3. Application Structure & Flow (Android/Compose)

1.  **Single-Activity Architecture:** The application is a single `MainActivity` that hosts all UI.
2.  **Navigation:** Jetpack Compose Navigation (`NavHostController`) is used to manage transitions between screens.
3.  **Composable Screens:**
    *   **Startup Screen (`MainMenuComposable`):** The first screen the user sees. It serves as the main menu with three buttons: "Play," "Instructions," and "Configuration."
    *   **Game Screen:** The game itself is hosted within an `AndroidView` Composable, which embeds the LibGDX game view.
    *   **Instructions & Scoring Screens:** Scrollable Composables that display the game rules and scoring details.
    *   **Configuration Screen:** A Composable screen with UI elements (e.g., a `Slider`) to adjust game settings like the Morse code tone pitch.
4.  **State Management:** A central `GameStateViewModel` (extending `androidx.lifecycle.ViewModel`) holds and manages shared state like `isPaused` using `StateFlow` or `MutableState`. `DataStore` or `SharedPreferences` are used to persist user settings like tone pitch.
5.  **Pause Menu:** A dialog or a separate Composable that is conditionally displayed as an overlay on top of the `AndroidView` game screen. It is controlled by the `GameStateViewModel`.

4. Game "Screen" (LibGDX) Specification

4.1. Screen Setup (`show()` method)

  - **Safe Area Handling:** The `MainActivity` is responsible for observing the window insets using `WindowInsetsCompat`. It then passes the top inset value down to the LibGDX `Screen`, which creates an offset for a main "world" container, ensuring all game elements are rendered below the device's camera notch or status bar.
  - **Background:** A solid light blue color, set via `Gdx.gl.glClearColor()`.
  - **Physics World (Box2D):**
    - A `World` object is created with a weak downward gravity vector: `Vector2(0, -0.4f)`.
    - Static `Body` objects are created for the screen boundaries.
    - A `ContactListener` is set on the world to handle collision events.
  - **UI Stage (Scene2D.ui):**
    - A LibGDX `Stage` manages in-game UI actors.
    - **Score Label** & **Progress Label:** `Label` actors are added to the stage, positioned in the top-right and top-left corners of the safe area.
  - **Barbecue Grill:**
    - Implemented as two separate LibGDX `Actor` instances with different z-indexes for a layered effect.
    - Both actors are tappable to signal a pause event back to the `GameStateViewModel`.
    - A **static** Box2D `Body` with a rectangular `Fixture` represents the flame's contact area.
    - **Physics Categories:** `PIG_CATEGORY = 0x0001;`, `FLAME_CATEGORY = 0x0002;`.

4.2. Gameplay Loop (`render()` method)

(The core gameplay logic is platform-agnostic and remains identical to the iOS specification: Start Round -> Spawn -> Player Interaction -> Evaluate Round.)

4.3. Scoring System

(The scoring logic is platform-agnostic and remains identical to the iOS specification.)

4.4. Learning & Progression System

(The learning and progression logic is platform-agnostic and remains identical to the iOS specification.)

4.5. Physics Contact (`ContactListener`)

  - The `beginContact` method checks for pig-flame collisions.
  - It verifies the pig's position is near the bottom of the screen.
  - The pig's `Body` and `Actor` are removed.
  - A **LibGDX `ParticleEffect`** is created at the precise point of contact (`contact.getWorldManifold().getPoints()[0]`).

5. Procedural Asset Generation (Android Canvas)

  - **`PigTextureGenerator`:** A Kotlin `object` (singleton). It has a method that creates a `Bitmap`, draws a pig face onto its `Canvas`, and optionally adds a letter. The final `Bitmap` is converted to a LibGDX `Texture`.
  - **`BarbecueGrillGenerator` & `ParticleTextureGenerator`:** Follow the same pattern of creating a `Bitmap`, drawing onto its `Canvas`, and converting to a LibGDX `Texture`.

6. Audio System (`MorseCodePlayer` on Android)

  - **Architecture:** A Kotlin `object` (singleton).
  - **Engine:** An instance of the `android.media.AudioTrack` class.
  - **Sound Generation:** Pre-generates `ByteArray` or `ShortArray` buffers for dots, dashes, and silent gaps using raw PCM sine-wave data.
  - **Configuration:** The tone frequency is read from `DataStore`/`SharedPreferences`. The class exposes a method to update the frequency and regenerate the PCM buffers in real-time when the user changes the setting.
  - **Playback:** Concatenates the pre-generated PCM buffers into a single `ByteArray` for the entire sequence and writes it to the `AudioTrack` instance for playback on a background thread (Coroutine).