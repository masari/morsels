Game Specification: Morsels

1. High-Level Overview

Morsels is an educational game designed to teach players International Morse Code in an engaging way. The core gameplay loop consists of listening to a sequence of letters played as Morse code, and then tapping falling objects (pigs) corresponding to those letters in the correct order. The game features a progressive learning system that introduces new letters as the player demonstrates mastery. It is built using a combination of UIKit for the application's user interface and menus, and SpriteKit for the main game scene. SwiftUI is used for specific sub-views like the instructions and scoring screens for a modern look and feel.

2. Core Technologies

  - UI Framework: UIKit is the primary framework for the app's structure, navigation (UINavigationController), and view controllers. SwiftUI is used via UIHostingController to display modern, rich UI for specific screens like Instructions and Scoring.
  - Game Engine: SpriteKit for the 2D game scene, physics, and animations.
  - Audio Engine: AVFoundation (AVAudioEngine) for on-the-fly generation and playback of Morse code sine-wave tones.
  - Asset Generation: Core Graphics and UIKit for procedural generation of all visual assets (pigs, grill, particles). No static image assets are used.

3. Application Structure & Flow

1.  **Startup Screen (MainMenuViewController):** This is the first screen the user sees. It is built with UIKit and serves as the main menu. It contains three primary navigation buttons:
    *   **Play Button:** Transitions the user to the `GameViewController`, starting a new game session.
    *   **Instructions Button:** Pushes the `InstructionsViewController`, which hosts a SwiftUI view displaying the game rules.
    *   **Config Button:** Pushes the `ConfigurationViewController`, which allows the user to adjust settings like the tone pitch of the Morse code.
2.  **Game View (GameViewController):** A `UIViewController` that hosts the `SKView` where the game is rendered. It manages the presentation of the pause menu and handles navigation back to the main menu.
3.  **Game Scene (GameScene.swift):** The core SpriteKit scene where all gameplay occurs. It communicates with the `GameViewController` via a delegate pattern to handle pausing.
4.  **Pause Menu (PauseMenuViewController):** A modal `UIViewController` with a semi-transparent background that is presented on top of the `GameViewController`. It contains "Continue" and "Quit" buttons.

4. Game Scene (GameScene.swift) Specification

4.1. Scene Setup

  - **Safe Area Handling:** All game elements are placed inside a single `worldNode`. The `GameViewController` calculates the safe area insets and adjusts the position of this `worldNode` to ensure all content appears correctly below the device's camera notch.
  - **Background:** A solid light blue color.
  - **Physics:**
      - Gravity is a weak downward vector: `CGVector(dx: 0, dy: -0.4)`.
      - The scene has an edge boundary to contain nodes.
      - It conforms to `SKPhysicsContactDelegate` to handle collisions.
  - **UI Elements:**
      - **Score Label:** Top-right corner, displays "Score: [current score]".
      - **Progress Label:** Top-left corner, displays "Learning: [X]/26 letters".
      - **Failure Indicators:** Displays "üçñ" icons below the score for each failed round.
  - **Barbecue Grill:**
      - Positioned at the bottom of the screen, procedurally generated and animated.
      - Composed of a background and foreground `SKSpriteNode` to create a layered effect. Both nodes are tappable to trigger the pause menu.
      - Contains a static physics body (`flame`) to detect contact with pigs.
      - **Physics Categories:** `pig: 0b1`, `flame: 0b10`.

4.2. Gameplay Loop

1.  **Start Round:**
      - A random sequence of 1-4 letters is generated from the player's current learning pool.
      - The `MorseCodePlayer` plays the audio for this sequence.
      - After a 1-second delay, the corresponding pig sprites are spawned.
2.  **Spawning:**
      - "Pig" `SKSpriteNode`s are created with procedurally generated textures, each displaying its letter.
      - They are spawned at random X positions at the top of the screen with a slight random initial velocity.
3.  **Player Interaction:**
      - Tapping a pig with the correct letter in the sequence removes it and updates the score.
      - Tapping a pig out of order triggers a 1-second penalty where input is disabled.
4.  **Round Evaluation:**
      - Called when all pigs are gone. It updates learning stats and score.
      - If no pigs were tapped correctly, it counts as a failed round. Three failed rounds result in a Game Over.

4.3. Scoring System

  - **Base Points:** 10 points per correctly tapped pig.
  - **Completion Bonus:** 50 points per pig for completing a sequence perfectly.
  - **Streak Bonus:** An escalating bonus (`25 * streak`) is awarded for every 3 consecutive perfect rounds.

4.4. Learning & Progression System

  - **Letter Progression:** A predefined array of letters is used, ordered by Morse code simplicity.
  - **Learning Stage:** The game tracks the player's progress and only uses letters they have "unlocked."
  - **Advancement:** The player unlocks the next letter in the progression by demonstrating mastery (at least 5 correct taps and 80% accuracy) of all currently unlocked letters.

4.5. Physics Contact

  - When a pig contacts the grill's flame body, a puff of smoke particle effect is generated at the precise point of contact.
  - A check ensures this only happens when the pig is near the bottom of the screen (`position.y < size.height * 0.25`).

5. Procedural Asset Generation

  - **PigTextureGenerator:** A singleton class that generates `UIImage` or `SKTexture` assets of a pig face, optionally with a character centered on it.
  - **BarbecueGrillGenerator:** Generates animated textures for the layered barbecue grill.
  - **ParticleTextureGenerator:** Generates a soft, radial gradient texture for smoke particles.

6. Audio System (MorseCodePlayer.swift)

  - **Architecture:** A singleton that uses `AVAudioEngine`.
  - **Sound Generation:** Pre-generates `AVAudioPCMBuffer` instances for dots, dashes, and silent gaps using sine waves. The frequency of the sine wave is configurable by the user.
  - **Configuration:** The tone pitch can be adjusted by the user in the Configuration screen. The selected value is saved to `UserDefaults` and is used to regenerate the audio buffers in real-time.
  - **Playback:** Constructs a sequence of the pre-generated buffers to play any given string of letters.